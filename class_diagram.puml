@startuml
skinparam groupInheritance 3

class EventTarget {
}

package "Action" as ActionNS {

    enum Action::Shape {
        POINT
        LINE
        CONE
        CIRCLE
        SQUARE
    }

    enum Action::Targets {
        SELF
        FRIENDLY
        HOSTILE
        ALL
    }

}

package "Entity" as EntityNS {

    class Entity::Target {
        + Target( std::shared_ptr<Entity> &entity )
        + std::shared_ptr<Entity> asEntity()
        - std::shared_ptr<Entity> entity
    }

    class Entity::TempFeatureSet {
        + std::shared_ptr<FeatureSet> set
        + std::shared_ptr<Entity> source
        + EffectType effectType
        + int modNumerator
        + int modDenominator
    }

}

package "Character" as CharacterNS {
	class Character::Target {
		+ Target( std::shared_ptr<Character> &character )
		+ std::shared_ptr<Entity> asEntity()
		+ std::shared_ptr<Character> asCharacter()
		- std::shared_ptr<Character> character
	}
}

package "Item" as ItemNS {
    class Item::Target {
        + Target(std::shared_ptr<Item> item)
        + std::shared_ptr<Entity> asEntity()
        + std::shared_ptr<Item> asItem()

        - std::shared_ptr<Item> item
    }
}

package "Consumable" as ConsumableNS {
    class Consumable::Target {
        + Target(std::shared_ptr<Item> item)
        + std::shared_ptr<Entity> asEntity()
        + std::shared_ptr<Item> asItem()
        + std::shared_ptr<Consumable> asConsumable()

        - std::shared_ptr<Consumable> Consumable
    }
}

package "Equippable" as EquippableNS {
    class Equippable::Target {
        + Target(std::shared_ptr<Item> item)
        + std::shared_ptr<Entity> asEntity()
        + std::shared_ptr<Item> asItem()
        + std::shared_ptr<Equippable> asEquippable()

        - std::shared_ptr<Equippable> equippable
    }
}

enum Type {
    PASS
    MOVE
    CONSUME
    EQUIP
    INTERACT
    ATTACK
    AID
    EFFECT
}

abstract class Action {
    + const EventType preEvent
    + const EventType postEvent

    + const Targets targets
    + const int range
    + const Shape shape
    + const bool aoe
    + const int aoeSize

    + Action(EventType preEvent, EventType postEvent, Targets targets, int range, Shape shape, bool aoe, int aoeSize)

    + {abstract} void onHit(std::shared_ptr<Character> from, std::shared_ptr<Entity> to, Position castPoint)
}


class ConsoleDungeonRenderer {
    # void entityMoved(const std::shared_ptr<Entity> entity, Position oldPos)

    # void entityCreated(const std::shared_ptr<Entity> entity)

    # void entityDestroyed(const std::shared_ptr<Entity> entity)

    # void cellChanged(Position position)
}

abstract class DungeonRenderer {
    + void changeCell(Position position)

    + void notify(EventInfo &info)
    + const std::vector<EventType> listeningFor() const

    # {static} std::vector<EventType> eventTypes;

    # DungeonRenderer(const std::vector<CellType> &cells);

    # {abstract} void entityMoved(const std::shared_ptr<Entity> entity, Position oldPos)
    # {abstract} void entityAdded(const std::shared_ptr<Entity> entity)
    # {abstract} void entityRemoved(const std::shared_ptr<Entity> entity)
    # {abstract} void cellChanged(Position position)

    const std::vector<CellType> &cells
}


class Entity {
    + void doTurn()

    + void removeFromContainers()
    + ~Entity()

    + void addListener(Listener &listener)
    + void removeListener(Listener &listener)
    + std::unique_ptr<EventTarget> getAsTarget()

    + void addModifier(StatModifier &modifier, int modNumerator = 1, int modDenominator = 1)
    + void removeModifier(StatModifier &modifier, int modNumerator = 1, int modDenominator = 1)

    + void addAction(Action &action)
    + void removeAction(Action &action)

    + void addFeatureSet(FeatureSet &featureSet, int modNumerator = 1, int modDenominator = 1)
    + void removeFeatureSet(FeatureSet &featureSet, int modNumerator = 1, int modDenominator = 1)

    + void addTemporaryFeatureSet(std::shared_ptr<Entity> source, std::shared_ptr<FeatureSet> featureSet, EffectType effectType, int numTurns)

    + bool isA(int type)

    + void damage(std::shared_ptr<Entity> source, int amount)
    + int damage(int damage)
    + void heal(std::shared_ptr<Entity> source, int amount)
    + void heal(int amount)
    + void move(std::shared_ptr<Entity> source, int distance, Direction direction)
    + void move(int distance, Direction direction)
    + void move(std::shared_ptr<Entity> source, Position destination)
    + void move(Position destination)
    + void kill(std::shared_ptr<Entity> source)
    + void destroy()
    + void interact(Character *source)

    + int getHealth()
    + void setHealth(int amount)

    + void addListReference(std::list<std::shared_ptr<Entity>> &list, std::list<std::shared_ptr<Entity>>::iterator reference)
    + void removeListReference(std::list<std::shared_ptr<Entity>> &list)

    + Position getPosition()
    + int getSize()
    + int getMaxHealth()
    + int getInitiative()
    + int getDefenceStrength()
    + int getKnockbackResist()
    + int getDodge()

    + std::shared_ptr<Entity> clone()

    # virtual Stat & getCorrespondingStat(StatModifier &modifier)

    # Position position
    # int health

    # Stat size
    # Stat maxHealth
    # Stat initiative
    # Stat defenseStrength
    # Stat knockbackResist
    # Stat dodge

    # void checkDead()

    + void trigger(EventType eventType)
    + void trigger(EventType eventType, std::shared_ptr<Entity> secondary)
    + void trigger(EventType eventType, std::vector<std::shared_ptr<Entity>> secondaries)
    + void trigger(EventType eventType, Position position)
    + void trigger(EventType eventType, Position position, std::shared_ptr<Entity> secondary)
    + void trigger(EventType eventType, Position position, std::vector<std::shared_ptr<Entity>> secondaries)
    + void trigger(EventType eventType, int integer)
    + void trigger(EventType eventType, int integer, std::shared_ptr<Entity> secondary)
    + void trigger(EventType eventType, int integer, std::vector<std::shared_ptr<Entity>> secondaries)
    + void trigger(EventType eventType, float num)
    + void trigger(EventType eventType, float num, std::shared_ptr<Entity> secondary)
    + void trigger(EventType eventType, float num, std::vector<std::shared_ptr<Entity>> secondaries)
    + void trigger(EventType eventType, double num)
    + void trigger(EventType eventType, double num, std::shared_ptr<Entity> secondary)
    + void trigger(EventType eventType, double num, std::vector<std::shared_ptr<Entity>> secondaries)
    + void trigger(EventType eventType, EventInfo::Data &reference)
    + void trigger(EventType eventType, EventInfo::Data &reference, std::shared_ptr<Entity> secondary)
    + void trigger(EventType eventType, EventInfo::Data &reference, std::vector<std::shared_ptr<Entity>> secondaries)

    - int turnCount

    - void checkTempFeatures()


    - std::map<std::list<std::shared_ptr<Entity>>*, std::list<std::shared_ptr<Entity>>::iterator> listReferences

    - std::map<EventType, std::set<std::shared_ptr<Listener>>> listeners

    - std::map<int, TempFeatureSet> tempFeatureSets

    - std::set<int> types

    - std::shared_ptr<Controller> controller
}

class Character {
    + void doTurn()

    + std::unique_ptr<EventTarget> getAsTarget()

    + void addAction(Action &action)
    + void removeAction(Action &action)

    + void give(std::shared_ptr<Item> item)

    + int getAttackStrength()
    + int getSpellStrength()
    + int getSpeed()
    + int getTenacity()
    + int getAccuracy()

    + std::shared_ptr<Entity> clone()

    # Stat & getCorrespondingStat(StatModifier &modifier)

    # Stat attackStrength
    # Stat spellStrength
    # Stat speed
    # Stat tenacity
    # Stat accuracy

    # std::list<std::shared_ptr<Item>> inventory
    # std::map<int, std::shared_ptr<Item>> slots
}

class Item {
    + Item()
    + std::unique_ptr<EventTarget> getAsTarget()
}

class Consumable {
    + Consumable()
    + std::unique_ptr<EventTarget> getAsTarget()
}

class Equippable {
    + Equippable()
    + std::unique_ptr<EventTarget> getAsTarget()
}

class Stat {
    + Stat()
    + Stat(int base)
    + int value
    + std::multiset<std::pair<int, int>> bases
    + int base
    + int shift
    + int multiplier
    + int divider
    + void update()
}

class Stage {
    + Stage(State &state, int id)
    + void start(Game &game) = 0
    + virtual ~Stage() = default

    # State &state
    # const int id
}

class Menu

class Dungeon {
    + Dungeon(State &state, int id, int width, int height)

    + void addEntity(Entity &entity)

    + std::list<std::shared_ptr<Entity>> getEntitiesAt(Position position)
    + CellType getCellType(Position position)
    + void start(Game &game) override

    - const int width
    - const int height
    - std::list<std::shared_ptr<Entity>> entities
    - std::vector<CellType> cells
    - std::vector<std::list<std::shared_ptr<Entity>>> cellEntities

    - std::list<std::shared_ptr<Entity>> & getCellListAt(Position position)
}

enum Direction {
    N
    NE
    E
    SE
    S
    SW
    W
    NW
}

enum EffectType {
    POSITIVE
    NEGATIVE
    NEUTRAL
}

enum EventType {
	GENERIC = '0
	GENERIC_DONE = '1

	INTERACTED = 0b1'0
	INTERACTED_DONE = 0b1'1
	ATTACKED = 0b10'0
	ATTACKED_DONE = 0b10'1
	MOVED = 0b11'0
	MOVED_DONE = 0b11'1
	OCCUPIED = 0b100'0
	OCCUPIED_DONE = 0b100'1
	CREATED = 0b101'0
    CREATED_DONE = 0b101'1
    DESTROYED = 0b110'0
    DESTROYED_DONE = 0b110'1
	HEALED = 0b111'0
	HEALED_DONE = 0b111'1
    TEMP_SET_ADD = 0b1000'0

	MOVE = 0b1'0000'0
	MOVE_DONE = 0b1'0000'1
	ATTACK = 0b10'0000'0
	ATTACK_DONE = 0b10'0000'1
	CAST = 0b11'0000'0
	CAST_DONE = 0b11'0000'1
	CONSUME = 0b100'0000'0
	CONSUME_DONE = 0b100'0000'1
	EQUIP = 0b101'0000'0
	EQUIP_DONE = 0b101'0000'1
	MISS = 0b110'0000'0
	MISS_DONE = 0b110'0000'1
    ADDED_TO_FLOOR = 0b111'0000'0
    ADDED_TO_FLOOR_DONE = 0b111'0000'1

	CONSUMED = 0b1'0000'0000'0
	CONSUMED_DONE = 0b1'0000'0000'1
    EQUIPPED = 0b10'0000'0000'0
    EQUIPPED_DONE = 0b10'0000'0000'1
}

class Position {
    + int y
    + int x
    + Position()
    + Position(int y, int x)
    + Position(const Position &other)
    + Position(Position &&other)
    + Position &operator=(const Position &other)
    + Position &operator=(Position &&other)
    + Position operator+(const Position &other)
}

enum Size {
    MINISCULE
    SMALL
    MEDIUM
    LARGE
}

enum StatType {
    NONE

    SIZE
    MAX_HEALTH
    INITIATIVE
    DEFENSE_STRENGTH
    KNOCKBACK_RESIST
    DODGE

    ATTACK_STRENGTH
    SPELL_STRENGTH
    SPEED
    TENACITY
    ACCURACY
}

enum CellType {
    EMPTY
    WALL
    FLOOR
    HALL
}

package "EventInfo" as EventInfoNS {
    class EventInfo::Data{
        + Position position
        + int integer1
        + int integer2
        + double doubleFloat
        + float float1
        + float float2
    }
}

class EventInfo {
    + Position eventPosition
    + int eventInteger
    + int eventInteger2
    + double eventDouble
    + float eventFloat
    + Data *eventDataPointer
    + EventType eventType
    + std::unique_ptr<EventTarget> primary
    + std::unique_ptr<EventTarget> secondary
    + std::vector<std::unique_ptr<EventTarget>> secondaries
}

class EventTarget {
    + virtual ~EventTarget()
    + std::shared_ptr<Entity> asEntity()
    + std::shared_ptr<Character> asCharacter()
    + std::shared_ptr<Item> asItem()
    + std::shared_ptr<Consumable> asConsumable()
    + std::shared_ptr<Equipable> asEquippable()
}

class FeatureSet {
    + std::vector<std::shared_ptr<Listener>> listeners
    + std::vector<StatModifier> statModifiers
    + std::vector<std::shared_ptr<Action>> actions
}

class Game {
    + void setInitialStage(int stage)

    + void addStage(int group, Stage *stage)
    + void removeState(int id)
    + void removeStates(int group)

    + void addEntityClass(int id, Entity *entity)
    + State & getState()
    + void run()

    - std::map<int, std::shared_ptr<Stage>> stages
    - std::shared_ptr<Stage> currentStage
    - State state
}

class Listener {
    + virtual ~Listener()
    + void notify(EventInfo &info)
    + const std::vector<EventType> listeningFor() const
}

class Race {
    + std::string name
    + std::string description
    + std::string shortcut
    + std::shared_ptr<FeatureSet> featureSet
    + int id
}

class State {
    + Character player {}
    + Loader loader {}
}

package "StatModifier" as StatModifierNS {
     enum StatModifier::Step {
        BASE
        ADD
        SUBTRACT
        MULTIPLY
        DIVIDE
        MULTDIV
     }
}

class StatModifier {
    + StatType stat
    + Step type
    + std::int_least16_t base
    + std::int_least16_t priority
    + std::int_least16_t numerator
    + std::int_least16_t denominator
    + std::int_least32_t amount
    + StatModifier()
    + StatModifier(StatType stat, Step type, int_least32_t amount)
    + StatModifier(StatType stat, Step type, int_least16_t one, int_least16_t two)
}

class Loader {
    + Loader()
    + Loader(std::string gameFile)
    + void loadFile(std::string file)
    + int getId(std::string name) const
    + const std::map<int, Race> getClassOptions() const
    - void parseFile(std::string gameFile)
    - void parseSets(std::string gameFile)
    - void parseRest(std::string gameFile)
    - void parseSet(std::istream &s)
    - void parseRace(std::istream &s)
    - void parseMob(std::istream &s)
    - void parseItem(std::istream &s)
    - void parseConsumable(std::istream &s)
    - void parseEquippable(std::istream &s)
    - std::shared_ptr<Listener> loadEffect(std::istream &s)
    - std::shared_ptr<Action> loadAction(std::istream &s)
    - std::shared_ptr<Controller> loadController(std::istream &s)
    - int parseId(std::string name)

    - std::map<std::string, std::unique_ptr<FeatureSet>> setTable
    - std::map<std::string, int> typeTable

    - std::map<int, Race> races

    - std::map<int, std::unique_ptr<Character>> mobs

    - std::vector<std::shared_ptr<Controller>> controllers
}

Entity::TempFeatureSet *-- Entity

EventInfo::Data *-- EventInfo

Stage <|- Menu
Stage <|- Dungeon

Action::Shape *-- Action
Action::Targets *-- Action

EventType *-- Action
EventType *-- Listener

Listener <|- DungeonRenderer

DungeonRenderer <|- ConsoleDungeonRenderer

EventTarget <|- Entity::Target
EventTarget <|- Character::Target
EventTarget <|- Item::Target
EventTarget <|- Consumable::Target
EventTarget <|- Equippable::Target

Entity <|- Item
Entity <|- Character
Item <|- Consumable
Item <|- Equippable

Entity::Target .. Entity
Character::Target .. Character
Item::Target .. Item
Consumable::Target .. Consumable
Equippable::Target .. Equippable

Stat "6" *-- Entity
Stat "11" *-- Character

Position *-- Entity

State *-- Game
State o-- Stage

Race *-- Loader
FeatureSet *-- Loader
Character *-- Loader
Controller o-- Loader

Listener <|-- Allergy
Listener <|-- LifeDrain
Listener <|-- ConsumedHealthMod
Listener <|-- VenerabilityModifier
Listener <|-- Regen
Listener <|-- Loot
Listener <|-- Venerability
Listener <|-- DepleteOnConsume
Listener <|-- RestoreOnConsume
Listener <|-- PointMod
Listener <|-- DropItems

StatModifier "0..*" *-- FeatureSet
Action "0..*" *-- FeatureSet
Listener "0..*" *-- FeatureSet

Type *-- Command
Direction *-- Command
EffectType *-- Consumable

StatType *-- StatModifier

StatModifier::Step *-- StatModifier

CellType *-- Dungeon

@enduml